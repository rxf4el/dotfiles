#+TITLE: INIT-EMACS - LITERATE CONFIGURATION
#+AUTHOR: rxf4el
#+EMAIL:  rxf4el@gmail.com
* HEADER
  #+BEGIN_SRC emacs-lisp
  ;;;
  #+END_SRC

* PACKAGES
** STRAIGHT.el
   #+BEGIN_SRC emacs-lisp
     (setq straight-vc-git-default-clone-depth 1)
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
     (require 'straight-x)
   #+END_SRC

** LEAF.el
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'leaf)
     (straight-use-package 'leaf-keywords)

     (leaf leaf
       :require t
       :init
       (leaf leaf-keywords
         :emacs> 24.4
         :require t
         ;; :setq (leaf-defaults . '(:straight t))
         :init
         (leaf-keywords-init)))

     (leaf diminish
       :straight t
       :require t)

     (leaf async
       :straight t
       :leaf-defer nil
       :setq (async-bytecomp-package-mode . t))
   #+END_SRC

* INITIALS
** PERSONAL
*** INFO
    #+BEGIN_SRC emacs-lisp
      (leaf info
            :doc "Personal Information")
    #+END_SRC

*** PATH(S)ET
    #+BEGIN_SRC emacs-lisp
      (leaf pathset
            :doc "Set PATHS"
            :config
            (defvar my:user  (getenv "HOME"))
            (defvar my:emacs (concat my:user "/.emacs.d"))
            (defvar my:cache (concat my:emacs "/.local/cache"))
            (defvar my:org   (concat my:user "/Dropbox/org")))
    #+END_SRC

*** OPENCONFIG
    #+BEGIN_SRC emacs-lisp

    #+END_SRC

** DEFAULTS
   #+BEGIN_SRC emacs-lisp
     (leaf defaults
           :config
           (setq-default
            inhibit-startup-message t
            inhibit-x-resources t
            inhibit-splash-screen t
            inhibit-startup-screen t
            inhibit-startup-echo-area-message t
            initial-major-mode 'emacs-lisp-mode
            frame-inhibit-implied-resize t
            initial-scratch-message ""
            hl-line-sticky-flag nil
            ;; Prefer horizental split
            split-height-threshold nil
            split-width-threshold 120
            ;; Don't create lockfiles
            create-lockfiles nil
            ;; UTF-8
            buffer-file-coding-system 'utf-8-unix
            default-file-name-coding-system 'utf-8-unix
            default-keyboard-coding-system 'utf-8-unix
            default-process-coding-system '(utf-8-unix . utf-8-unix)
            default-sendmail-coding-system 'utf-8-unix
            default-terminal-coding-system 'utf-8-unix
            ;; Add final newline
            require-final-newline t
            ;; Backup setups
            backup-directory-alist `((".*" . ,temporary-file-directory))
            auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
            backup-by-copying t
            delete-old-versions t
            kept-new-versions 6
            kept-old-versions 2
            version-control t
            ;; Custom file
            custom-file (concat my:cache "/custom.el")
            ;; Xref no prompt
            xref-prompt-for-identifier nil
            ;; Mouse yank at point instead of click position.
            mouse-yank-at-point t
            ;; This fix the cursor movement lag
            auto-window-vscroll nil
            ;; Window divider setup
            window-divider-default-right-width 1
            window-divider-default-bottom-width 1
            window-divider-default-places t
            ;; Don't wait for keystrokes display
            echo-keystrokes 0.01
            show-paren-style 'parenthese
            ;; Overline no margin
            overline-margin 0
            underline-minimum-offset 0
            tab-width 4
            ;; Don't show cursor in non selected window.
            cursor-in-non-selected-windows nil
            comment-empty-lines nil                ;t
            visible-cursor t
            ;; Improve long line display performance
            bidi-inhibit-bpa t
            bidi-paragraph-direction 'left-to-right
            ;; Allow resize by pixels
            frame-resize-pixelwise t
            x-gtk-resize-child-frames nil
            x-underline-at-descent-line t
            indent-tabs-mode nil
            read-process-output-max (* 1024 1024)
            ;; Don't truncate lines in a window narrower than 65 chars.
            truncate-partial-width-windows 65
            ;; Default line number width.
            display-line-numbers-width 1           ; 4
            ;; Window divider on right
            window-divider-default-places t
            ;; Don't display comp warnings
            warning-suppress-log-types '((comp)))

           (fset 'yes-or-no-p 'y-or-n-p)

           (add-hook 'prog-mode-hook 'display-line-numbers-mode)
           (add-hook 'conf-mode-hook 'display-line-numbers-mode)
           (add-hook 'prog-mode-hook 'hl-line-mode)
           (add-hook 'conf-mode-hook 'hl-line-mode)
           (add-hook 'prog-mode-hook 'subword-mode)
           (add-hook 'before-save-hook 'delete-trailing-whitespace)

           ;;; unset annoying freezes whe C-z is pressed
           (global-unset-key (kbd "C-z"))
           (global-unset-key (kbd "C-x C-z"))

           (scroll-bar-mode -1)
           (tool-bar-mode -1)
           (menu-bar-mode -1)
           ;; (fringe-mode -1)
           (add-hook 'after-init-hook (lambda () (blink-cursor-mode -1)))

           ;;; project.el use C-x p
           (global-unset-key (kbd "C-x C-p"))
           (global-set-key (kbd "C-x C-d") #'dired)

           (defun +reopen-file-with-sudo ()
             (interactive)
             (find-alternate-file (format "/sudo::%s" (buffer-file-name))))

           (global-set-key (kbd "C-x C-z") #'+reopen-file-with-sudo)
           ;; (global-set-key (kbd "<f7>") #'profiler-start)
           ;; (global-set-key (kbd "<f8>") #'profiler-report)

           ;;; Run GC when idle for 7 seconds or when Emacs is unfocused.
           (run-with-idle-timer 7 t #'garbage-collect)
           (add-hook 'focus-out-hook #'garbage-collect))
   #+END_SRC

** AESTHETICS
*** CURSOR
*** FONT
    #+BEGIN_SRC emacs-lisp
      (defvar +font-family "Fira Code")
      (defvar +font-size 11)

      (defun +load-font ()
        (let* ((font-spec (format "%s-%d" +font-family +font-size)))
          (if (not (member +font-family (font-family-list)))
              (message "Font '%s' not available!" font-family)
            (set-face-attribute 'default nil :font font-spec)
            (set-frame-font font-spec t nil))))

      (+load-font)

      (leaf ligature
            :straight
            (ligature :type git
                      :host github
                      :repo "mickeynp/ligature.el")
            :config
            (ligature-set-ligatures 'emacs-lisp-mode
                                    '("->" "->>" "<=" ">="))
            (ligature-set-ligatures 'elixir-mode
                                    '("->" "=>" "|>" "<-" ">=" "<=" "!=" "!==" "===" "==" "::" "++" "&&" "||" "<<" ">>"))
            (ligature-set-ligatures 'clojure-mode
                                    '("->" "->>" ">=" "<="  ".-"))
            (ligature-set-ligatures 'web-mode
                                    '("</" "<!--" "-->" "/>"))
            (global-ligature-mode t))
    #+END_SRC

*** ICONS
    #+BEGIN_SRC emacs-lisp
      (leaf all-the-icons
            :straight t)
      ;; (use-package ibuffer-all-the-icons)
      ;; (use-package dired-all-the-icons)
    #+END_SRC

*** MODELINE
**** SIMPLE
     #+BEGIN_SRC emacs-lisp
       (defun +simple-mode-line-render (left right)
         "Return a string of `window-width' length.
       Containing LEFT, and RIGHT aligned respectively."
         (let ((available-width
                (- (window-total-width)
                   (+ (length (format-mode-line left))
                      (length (format-mode-line right)))
                   1)))
           (append left
                   (list (format (format "%%%ds" available-width) ""))
                   right)))

       (setq-default mode-line-format
                     '((:eval
                        (+simple-mode-line-render
                         ;; left
                         '((:eval (meow-indicator))
                           " %l:%C "
                           (:propertize (-3 "%p") face +modeline-dim-face)
                           (:eval (propertize " " 'display '(height 1.2)))
                           (:eval (rime-lighter)))
                         ;; right
                         '((:propertize " %m " face font-lock-keyword-face)
                           (:eval (+smart-file-name-with-propertize))
                           " ")))))
     #+END_SRC

**** SMARTMODELINE
     #+BEGIN_SRC emacs-lisp

     #+END_SRC

*** THEME
**** LAF
     #+BEGIN_SRC emacs-lisp
       (add-to-list 'load-path (expand-file-name "themes" user-emacs-directory))

       (defvar +after-change-theme-hook nil
         "Hooks called after theme is changed.")

       (require 'joker-theme)
       (require 'storybook-theme)
       (require 'printed-theme)

       (let ((margin 0))                       ; was 24
         (add-to-list 'default-frame-alist (cons 'internal-border-width margin))
         (set-frame-parameter nil 'internal-border-width margin))

       (defvar +current-theme nil
         "Name for current theme")

       (defvar +theme-list
         '(storybook joker printed))

       (set-display-table-slot standard-display-table
                               'vertical-border
                               (make-glyph-code ?┃))

       (defun +change-theme (&optional no-msg)
         (interactive)
         (let ((theme (car +theme-list)))
             (disable-theme theme)
             (setq +theme-list (append (cdr +theme-list) (list theme)))
           (let ((this-theme (car +theme-list)))
             (load-theme this-theme t)
             (unless no-msg
               (message "Load theme: %s" this-theme))
             (run-hook-with-args '+after-change-theme-hook this-theme))))

       (defun +highlight-prog-mode-function-name ()
         (face-remap-add-relative 'font-lock-function-name-face :underline t :extend t))

       (add-hook 'prog-mode-hook '+highlight-prog-mode-function-name)

       (defun +reload-font-and-theme ()
         (interactive)
         (+load-font)
         (load-theme (car +theme-list) t))

       (+change-theme t)
     #+END_SRC

* GENERALS
** BUILT(IN)S
*** AUTOREVERT
    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** BUFFERS
**** iBUFFER
       #+BEGIN_SRC emacs-lisp
         (global-set-key (kbd "C-x C-b") 'ibuffer)
       #+END_SRC

**** MINIBUFFERS
**** UNIQUIFY
*** DABBREV
*** DIRED
*** ELDOC
*** FLYMAKE
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'flymake
        (setq-default flymake-diagnostic-functions nil)
        (setq flymake-fringe-indicator-position 'right-fringe))

      (leaf flymake-diagnostic-at-point
        :straight (flymake-diagnostic-at-point
                   :type git
                   :host github
                   :repo "waymondo/flymake-diagnostic-at-point")
        :after (flymake)
        :setq (flymake-diagnostic-at-point-display-diagnostic-function
               . 'flymake-diagnostic-at-point-display-posframe)
        :hook (flymake-mode-hook . flymake-diagnostic-at-point-mode))
    #+END_SRC

*** HIPPI(E)XPAND
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'hippie-expand
        (setq hippie-expand-verbose t
              hippie-expand-try-functions-list
              '(yas/hippie-try-expand
                try-complete-file-name
                try-complete-file-name-partially
                try-expand-list
                try-expand-list-all-buffers
                try-expand-line
                try-expand-line-all-buffers
                try-expand-all-abbrevs
                try-expand-dabbrev
                try-expand-dabbrev-all-buffers
                try-expand-dabbrev-from-kill
                try-complete-lisp-symbol-partially
                try-complete-lisp-symbol)))
    #+END_SRC

*** ISEARCH
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'isearch
        (setq  search-highlight t
               isearch-lax-whitespace t
               isearch-regexp-lax-whitespace nil
               serach-whitespace-regexp ".*?"
               isearch-lazy-highlight t
               isearch-lazy-count t
               lazy-count-prefix-format nil
               lazy-count-suffix-format " (%s/%s)"
               isearch-yank-on-move 'shift
               isearch-allow-scroll 'unlimited))
    #+END_SRC

*** ORGMODE
**** ORG
     #+BEGIN_SRC emacs-lisp
       (defvar-local +org-last-in-latex nil)

       (defun +org-post-command-hook ()
         (ignore-errors
           (let ((in-latex (rime-predicate-org-latex-mode-p)))
             (if (and +org-last-in-latex (not in-latex))
                 (progn (org-latex-preview)
                        (setq +org-last-in-latex nil)))

             (when-let ((ovs (overlays-at (point))))
               (when (->> ovs
                          (--map (overlay-get it 'org-overlay-type))
                          (--filter (equal it 'org-latex-overlay)))
                 (org-latex-preview)
                 (setq +org-last-in-latex t)))

             (when in-latex
               (setq +org-last-in-latex t)))))

       (define-minor-mode org-latex-auto-toggle
         "Auto toggle latex overlay when cursor enter/leave."
         nil
         nil
         nil
         (if org-latex-auto-toggle
             (add-hook 'post-command-hook '+org-post-command-hook nil t)
           (remove-hook 'post-command-hook '+org-post-command-hook t)))

       ;;; Org babel

       (defun +org-redisplay-inline-images ()
         (when org-inline-image-overlays
           (org-redisplay-inline-images)))

       (defun +org-babel-setup ()
         (org-babel-do-load-languages
          'org-babel-load-languages
          '((python . t)
            (emacs-lisp . t)
            (clojure . t)))
         (setq org-babel-clojure-backend 'cider)
         (setq org-confirm-babel-evaluate nil)
         (add-hook 'org-babel-after-execute-hook '+org-redisplay-inline-images))

       (leaf org
         :bind
         (org-mode-map
               ("<f8>" . org-latex-auto-toggle))
         :config
         (require 'ob-clojure)
         ;;(require 'cider)
         (require 'org-tempo)
         (+org-babel-setup))

       ;;; Update latex options after change theme.
       (defun +org-update-latex-option-by-theme (theme)
         (when (bound-and-true-p org-format-latex-options)
           (setq org-format-latex-options
                 (plist-put org-format-latex-options :theme theme))))

       (add-hook '+after-change-theme-hook '+org-update-latex-option-by-theme)

       (leaf org-superstar
         :straight t
         :hook (org-mode-hook . (lambda ()
                                  (org-superstar-mode 1))))
     #+END_SRC

**** ORGUTILS
     #+BEGIN_SRC emacs-lisp
       ;; Org-Ref
       (leaf org-ref
         :straight t
         ;; :custom ((org-ref-ivy-cite-completion t)
         ;;          (org-ref-completion-library 'org-ref-ivy-cite))
         :config
         (require 'org-ref)
         (require 'org-ref-pdf)
         (require 'org-ref-bibtex)
         (require 'org-ref-url-utils)
         (setq reftex-default-bibliography (concat my:org "/biblio/ref.bib")
               org-ref-default-bibliography '((concat my:org "/biblio/ref.bib"))
               org-ref-bibliography-notes (concat my:org "/biblio/notes.org")
               org-ref-pdf-directory (concat my:org "/biblio/papers/")))


       ;; tasks management
       (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
       (setq org-log-done t
             org-clock-idle-time nil
             org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                                 (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)" "PHONE" "MEETING")))

       ;; Org-Agenda
       ;; agenda & diary
       (setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
       (setq org-agenda-include-diary nil
             org-agenda-tags-todo-honor-ignore-options t
             org-agenda-start-on-weekday nil
             org-agenda-start-day "-1d"
             org-agenda-span 7
             show-week-agenda-p t
             org-agenda-timegrid-use-ampm 1
             org-agenda-inhibit-startup t
             org-agenda-files '("~/Dropbox/org/work.org"
                                "~/Dropbox/org/stuff.org"
                                "~/Dropbox/org/inbox.org"))

       (leaf org-super-agenda
         :straight t
         :config
         (setq org-super-agenda-groups
               '((:name "Today"
                        :time-grid t
                        :scheduled today)
                 (:name "Due today"
                        :deadline today)
                 (:name "Important"
                        :priority "A")
                 (:name "Overdue"
                        :deadline past)
                 (:name "Due soon"
                        :deadline future)
                 (:name "Big Outcomes"
                        :tag "bo")))
         (org-super-agenda-mode))

       (leaf org-gcal
         :straight t
         :config
         (setq org-gcal-client-id "70155025522-sod2sd5j69fqbtajhnllgmgprhavspo5.apps.googleusercontent.com"
               org-gcal-client-secret "x58hbBKXDZ8JfdEdeDYYC8_u"
               org-gcal-fetch-file-alist '(("rxf4el@gmail.com" .  "~/Dropbox/org/inbox.org"))))

       (leaf calfw
         :straight t
         :config
         (setq cfw:display-calendar-holidays nil
               calendar-week-start-day 1
               cfw:fchar-junction ?╬
               cfw:fchar-vertical-line ?║
               cfw:fchar-horizontal-line ?═
               cfw:fchar-left-junction ?╠
               cfw:fchar-right-junction ?╣
               cfw:fchar-top-junction ?╦
               cfw:fchar-top-left-corner ?╔
               cfw:fchar-top-right-corner ?╗))

       (leaf calfw-org
         :straight t
         :bind ("C-c f" . cfw:open-org-calendar)
         :config
         (setq cfw:org-overwrite-default-keybinding t))

       ;; Org-Utils (need to port for the right place)
       ;; date insertion configuration
       (setq org-expiry-created-property-name "CREATED"
       org-expiry-inactive-timestamps t
       org-todo-state-tags-triggers '(("CANCELLED" ("CANCELLED" . t))
                                      ("WAITING" ("WAITING" . t))
                                      ("HOLD" ("WAITING") ("HOLD" . t))
                                      (done ("WAITING") ("HOLD"))
                                      ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                      ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                                      ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))))

       (setq org-latex-pdf-process
       '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
     #+END_SRC

*** PAIRS
    #+BEGIN_SRC emacs-lisp
      (electric-pair-mode 1)

      (leaf paren
        :straight t
        :init (show-paren-mode)
        :config
        (set-face-background 'show-paren-match (face-background 'default))
        (set-face-foreground 'show-paren-match "#def")
        (set-face-attribute 'show-paren-match nil :weight 'extra-bold))

      (leaf smartparens-config
        :straight smartparens
        :commands (smartparens-mode smartparens-strict-mode)
        :bind (smartparens-strict-mode-map
               ("C-}" . sp-forward-slurp-sexp)
               ("M-s" . sp-backward-unwrap-sexp)
               ("C-c [" . sp-select-next-thing)
               ("C-c ]" . sp-select-next-thing-exchange)))

      (leaf rainbow-delimiters
        :straight t
        :hook (prog-mode-hook))
    #+END_SRC

*** RECENTF
*** SKELETON
*** SERVER
    #+BEGIN_SRC emacs-lisp
      (require 'server)

      (unless (server-running-p)
        (server-start))
    #+END_SRC

*** TRAMP
*** WINDMOVE
    #+BEGIN_SRC emacs-lisp
      (leaf ace-window
            :straight t
            :commands
            (ace-swap-window ace-window)
            :custom
            (aw-keys '(?a ?o ?e ?u ?i))
            (aw-scope 'frame))

      (windmove-default-keybindings 'super)

      (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
      (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
      (global-set-key (kbd "S-C-<down>") 'shrink-window)
      (global-set-key (kbd "S-C-<up>") 'enlarge-window)
    #+END_SRC

** 3(rd)PART
*** AUTOINDENT
*** AVY
*** CODECOMPLETE
**** COMPANY
     #+BEGIN_SRC emacs-lisp
       (leaf company
         :straight t
         :init (global-company-mode +1)
         :commands (company-complete-common company-manual-begin company-grab-line)
         :config
         (setq company-idle-delay 0
               company-show-numbers t
               company-minimum-prefix-length 3
               company-tooltip-limit 5
               company-tooltip-align-annotations t
               company-dabbrev-downcase nil
               company-dabbrev-ignore-case nil
               company-dabbrev-code-other-buffers t
               company-require-match 'never
               company-global-modes '(not erc-mode
                                          message-mode
                                          help-mode
                                          gud-mode
                                          eshell-mode)
               company-backend '((company-capf
                                  company-keywords
                                  company-files
                                  company-yasnippet)
                                 (company-abbrev company-dabbrev))
               company-frontends '(company-pseudo-tooltip-frontend
                                   company-echo-metadata-frontend)))

       (leaf company-prescient
         :straight t
         :init
         (company-prescient-mode 1))

       (leaf company-box
         :straight t
         :commands (company-box--get-color
                    company-box--resolve-colors
                    company-box--add-icon
                    company-box--apply-color
                    company-box--make-line
                    company-box-icons--elisp)
         :hook (company-mode-hook . company-box-mode)
         :config
         (setq company-box-backends-colors nil
               company-box-show-single-candidate t
               company-box-max-candidates 50
               company-box-doc-delay 0.3)
         ;; Support `company-common'
         (defun my-company-box--make-line (candidate)
           (-let* (((candidate annotation len-c len-a backend) candidate)
                   (color (company-box--get-color backend))
                   ((c-color a-color i-color s-color) (company-box--resolve-colors color))
                   (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
                   (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
                                             (substring (propertize candidate 'face 'company-box-candidate) (length company-common) nil)))
                   (align-string (when annotation
                                   (concat " " (and company-tooltip-align-annotations
                                                    (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
                   (space company-box--space)
                   (icon-p company-box-enable-icon)
                   (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
                   (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
                                   (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
                                 (company-box--apply-color icon-string i-color)
                                 (company-box--apply-color candidate-string c-color)
                                 align-string
                                 (company-box--apply-color annotation-string a-color)))
                   (len (length line)))
             (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
                                              'company-box--color s-color)
                                  line)
             line))
         (advice-add #'company-box--make-line :override #'my-company-box--make-line)

         ;; Prettify icons
         (defun my-company-box-icons--elisp (candidate)
           (when (derived-mode-p 'emacs-lisp-mode)
             (let ((sym (intern candidate)))
               (cond ((fboundp sym) 'Function)
                     ((featurep sym) 'Module)
                     ((facep sym) 'Color)
                     ((boundp sym) 'Variable)
                     ((symbolp sym) 'Text)
                     (t . nil)))))
         (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

         (when (and (display-graphic-p)
                    (require 'all-the-icons nil t))
           (declare-function all-the-icons-faicon 'all-the-icons)
           (declare-function all-the-icons-material 'all-the-icons)
           (declare-function all-the-icons-octicon 'all-the-icons)
           (setq company-box-icons-all-the-icons
                 `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.85 :v-adjust -0.2))
                   (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.05))
                   (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
                   (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
                   (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
                   (Field . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
                   (Variable . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
                   (Class . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
                   (Interface . ,(all-the-icons-material "share" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
                   (Module . ,(all-the-icons-material "view_module" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
                   (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
                   (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.85 :v-adjust -0.2))
                   (Value . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
                   (Enum . ,(all-the-icons-material "storage" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
                   (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.85 :v-adjust -0.2))
                   (Snippet . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2))
                   (Color . ,(all-the-icons-material "palette" :height 0.85 :v-adjust -0.2))
                   (File . ,(all-the-icons-faicon "file-o" :height 0.85 :v-adjust -0.05))
                   (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.85 :v-adjust -0.2))
                   (Folder . ,(all-the-icons-faicon "folder-open" :height 0.85 :v-adjust -0.05))
                   (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
                   (Constant . ,(all-the-icons-faicon "square-o" :height 0.85 :v-adjust -0.05))
                   (Struct . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
                   (Event . ,(all-the-icons-faicon "bolt" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-orange))
                   (Operator . ,(all-the-icons-material "control_point" :height 0.85 :v-adjust -0.2))
                   (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.05))
                   (Template . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2)))
                 company-box-icons-alist 'company-box-icons-all-the-icons)))

     #+END_SRC

**** EGLOT
     #+BEGIN_SRC emacs-lisp
       (leaf eglot
             :straight t
             :commands (eglot-ensure eglot)
             :hook
             ((rust-mode c-mode elixir-mode python-mode) . eglot-ensure)
             :custom
             (eglot-stay-out-of '())
             (eglot-ignored-server-capabilites '(:documentHighlightProvider)))
     #+END_SRC

**** YASNIPPET
     #+BEGIN_SRC emacs-lisp
       (leaf yasnippet
         :straight t
         :init (yas-global-mode 1)
         :config
         (let ((inhibit-message t)) (yas-reload-all)))
     #+END_SRC

*** MAGIT
    #+BEGIN_SRC emacs-lisp
      (leaf magit
                :straight t
                :commands (magit))

      (leaf diff-hl
            :straight t
            :hook
            ((dired-mode . diff-hl-dired-mode)
             (prog-mode . diff-hl-mode)
             (conf-mode . diff-hl-mode)))

      (leaf dired-git-info
            :straight t
            :bind
            (dired-mode-map
                  ("v" . dired-git-info-mode))
            :custom
            (dgi-auto-hide-details-p . nil))
    #+END_SRC

*** MODAL
**** MEOW
     #+BEGIN_SRC emacs-lisp
       (defun meow-setup ()
         ;;(setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
         (meow-motion-overwrite-define-key
          '("j" . meow-next)
          '("k" . meow-prev))
         (meow-leader-define-key
          ;; SPC j/k will run the original command in MOTION state.
          '("j" . meow-motion-origin-command)
          '("k" . meow-motion-origin-command)
          ;; Use SPC (0-9) for digit arguments.
          '("1" . meow-digit-argument)
          '("2" . meow-digit-argument)
          '("3" . meow-digit-argument)
          '("4" . meow-digit-argument)
          '("5" . meow-digit-argument)
          '("6" . meow-digit-argument)
          '("7" . meow-digit-argument)
          '("8" . meow-digit-argument)
          '("9" . meow-digit-argument)
          '("0" . meow-digit-argument))
         (meow-normal-define-key
          '("0" . meow-expand-0)
          '("9" . meow-expand-9)
          '("8" . meow-expand-8)
          '("7" . meow-expand-7)
          '("6" . meow-expand-6)
          '("5" . meow-expand-5)
          '("4" . meow-expand-4)
          '("3" . meow-expand-3)
          '("2" . meow-expand-2)
          '("1" . meow-expand-1)
          '("-" . negative-argument)
          '(";" . meow-reverse)
          '("," . meow-inner-of-thing)
          '("." . meow-bounds-of-thing)
          '("[" . meow-beginning-of-thing)
          '("]" . meow-end-of-thing)
          '("a" . meow-append)
          '("A" . meow-open-below)
          '("b" . meow-back-word)
          '("B" . meow-back-symbol)
          '("c" . meow-change)
          '("C" . meow-change-save)
          '("d" . meow-delete)
          '("x" . meow-line)
          '("f" . meow-find)
          '("F" . meow-find-expand)
          '("g" . meow-keyboard-quit)
          '("G" . goto-line)
          '("h" . meow-left)
          '("H" . meow-left-expand)
          '("i" . meow-insert)
          '("I" . meow-open-above)
          '("m" . meow-join)
          '("M" . delete-indentation)
          '("s" . meow-kill)
          '("t" . meow-till)
          '("T" . meow-till-expand)
          '("w" . meow-mark-word)
          '("W" . meow-mark-symbol)
          '("j" . meow-next)
          '("J" . meow-next-expand)
          '("o" . meow-block)
          '("O" . meow-block-expand)
          '("k" . meow-prev)
          '("K" . meow-prev-expand)
          '("q" . meow-quit)
          '("r" . meow-replace)
          '("R" . meow-replace-save)
          '("n" . meow-search)
          '("N" . meow-pop-search)
          '("l" . meow-right)
          '("L" . meow-right-expand)
          '("u" . undo)
          '("v" . meow-visit)
          '("e" . meow-next-word)
          '("E" . meow-next-symbol)
          '("y" . meow-save)
          '("p" . meow-yank)
          '("z" . meow-pop-selection)
          '("Z" . meow-pop-all-selection)
          '("&" . meow-query-replace)
          '("%" . meow-query-replace-regexp)
          '("<escape>" . meow-last-buffer)))

       (leaf meow
             :straight
             (meow :type git
                   :host github
                   :repo "DogLooksGood/meow")
             :custom
             (meow-esc-delay . 0.001)
             (meow-select-on-exit . nil)
             (meow-replace-state-name-list . '((normal . "Ꮚ•ꈊ•Ꮚ")
                                               (insert . "Ꮚ`ꈊ´Ꮚ")
                                               (keypad . "Ꮚ'ꈊ'Ꮚ")
                                               (motion . "Ꮚ-ꈊ-Ꮚ")))
             :require (meow-cheatsheet meow-keymap meow-helpers)
             :init
             (meow-global-mode +1)
             :config
             (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
             (meow-setup-line-number)
             (meow-setup))
     #+END_SRC

*** PROJECTILE
*** SCROLLING
    #+begin_src emacs-lisp
      (setq-default hscroll-margin 2
                      hscroll-step 1
                      scroll-conservatively 1001
                      scroll-margin 0
                      scroll-preserve-screen-position t)

      (leaf sublimity-scroll
        :straight sublimity
        :init (sublimity-mode 1))

      (leaf yascroll
            :straight t
            :init (global-yascroll-bar-mode 1))
    #+end_src

*** SELECTRUM
    #+BEGIN_SRC emacs-lisp
      (leaf embark
        :straight t
        :bind
        ("s-a" . embark-act)
        :config
        ;; For Selectrum users:
        (defun current-candidate+category ()
          (when selectrum-active-p
            (cons (selectrum--get-meta 'category)
                  (selectrum-get-current-candidate))))
        (add-hook 'embark-target-finders #'current-candidate+category)
        (defun current-candidates+category ()
          (when selectrum-active-p
            (cons (selectrum--get-meta 'category)
                  (selectrum-get-current-candidates
                   ;; Pass relative file names for dired.
                   minibuffer-completing-file-name))))
        (add-hook 'embark-candidate-collectors #'current-candidates+category)
        ;; No unnecessary computation delay after injection.
        (add-hook 'embark-setup-hook 'selectrum-set-selected-candidate)
        (setq embark-action-indicator
              (lambda (map)
                (which-key--show-keymap "Embark" map nil nil 'no-paging)
                #'which-key--hide-popup-ignore-command)
              embark-become-indicator embark-action-indicator))

      ;; Consult users will also want the embark-consult package.
      (leaf embark-consult
        :straight t
        :after (embark consult)
        ;; if you want to have consult previews as you move around an
        ;; auto-updating embark collect buffer
        :hook
        (embark-collect-mode . embark-consult-preview-minor-mode))

      (leaf consult
        ;; :straight (consult :type git :host github :repo "minad/consult" :branch "main")
        :init
        (fset 'multi-occur #'consult-multi-occur)
        (setq register-preview-delay 0
              register-preview-function #'consult-register-preview)
        :bind
        ("C-x b" . consult-buffer)
        ("M-y" . consult-yank-pop)
        ("C-," . consult-line)
        :custom
        (consult-line-point-placement 'match-end))

      (leaf selectrum-prescient
        :straight t
        :init (selectrum-mode 1)
        :config
        (selectrum-prescient-mode 1)
        (prescient-persist-mode 1)
        (setq prescient-history-length 100
              prescient-sort-length-enable nil
              prescient-filter-method '(literal regexp initialism)))

      (leaf marginalia
        :straight (marginalia :type git :host github :repo "minad/marginalia" :branch "main")
        :config
        (marginalia-mode)
        (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light)))

      (leaf helm
        :straight t
        :custom (helm-bibtex-full-frame . nil)
        :config
        (setq helm-autoresize-max-height 0)
        (setq helm-autoresize-min-height 30)
        (helm-autoresize-mode 1))

      (leaf deadgrep
            :straight t
            :bind
            (deadgrep-mode-map
                  ("w" . deadgrep-edit-mode))
            (deadgrep-edit-mode-map
                  ("C-x C-s" . deadgrep-mode)))
    #+END_SRC

*** TREEMACS
    #+begin_src emacs-lisp
      (defun +treemacs-scale-font-size ()
        (face-remap-add-relative 'default :height 0.8))

      (leaf treemacs
            :straight t
            :commands
            (treemacs treemacs-select-window)
            :bind
            (("<f1>" . treemacs-select-window)
             (treemacs-mode-map
              ("<f1>" . treemacs)))
            :custom
            (treemacs-no-png-images . t)
            (treemacs-width . 40)
            :init
            (add-hook 'treemacs-mode-hook '+treemacs-scale-font-size))
    #+end_src

*** WHICH-KEY
    #+begin_src emacs-lisp
      (leaf which-key
            :straight t
            :init (which-key-mode 1))
    #+end_src

** PROGRAMMING
*** DATABASE
**** DB
**** SQL
*** LANGUAGES
**** CLOJURE
     #+BEGIN_SRC emacs-lisp

     #+END_SRC

**** COMMONLISP
**** PERL
**** PYTHON
**** R
     #+BEGIN_SRC emacs-lisp
       (leaf ess-R-data-view
         :straight t)
     #+END_SRC

**** SCHEME
*** MODES
**** CSV
**** MARKDOWN
     #+begin_src emacs-lisp
       (leaf markdown-mode
             :straight t
             :custom
             (markdown-fontify-code-blocks-natively . t)
             :init
             (add-hook 'markdown-mode-hook 'markdown-toggle-markup-hiding))
     #+end_src

**** NIX
     #+begin_src emacs-lisp
       (leaf nix-mode
         :straight t
         :mode ("\\.nix\\'" . nix-mode))
     #+end_src

**** WEB
     #+begin_src emacs-lisp
       (leaf web-mode
         :straight t
         :custom
         (web-mode-markup-indent-offset . 2)
         (web-mode-code-indent-offset . 2)
         (web-mode-css-indent-offset . 2))

       (setq-default
        js-indent-level 2
        css-indent-offset 2)

       (leaf emmet-mode
             :straight t
             :hook
             (web-mode . emmet-mode)
             (html-mode . emmet-mode)
             :bind
             (emmet-mode-keymap
              ("M-e" . emmet-expand-line)))
     #+end_src

**** YAML
** BIOINFORMATICS
*** GRAPHVIZ
*** READERS
**** EPUB
     #+BEGIN_SRC emacs-lisp
       (leaf nov
             :straight t
             :config (progn
                       (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
                       (add-hook 'nov-mode-hook
                                 (lambda ()
                                   (face-remap-add-relative 'variable-pitch
                                                            :family "Liberation Serif"
                                                            :height 1.2)))
                   ;; (add-hook 'nov-mode-hook (lambda () (olivetti-mode 1)))
                       (setq nov-text-width 72)))
     #+END_SRC

**** PDF
     #+BEGIN_SRC emacs-lisp
       (leaf pdf-tools
             :straight t
             :bind (pdf-view-mode-map
                    ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
                    ("g"  . pdf-view-first-page)
                    ("G"  . pdf-view-last-page)
                    ("l"  . image-forward-hscroll)
                    ("h"  . image-backward-hscroll)
                    ("j"  . pdf-view-next-line-or-next-page)
                    ("k"  . pdf-view-previous-line-or-previous-page)
                    ("e"  . pdf-view-goto-page)
                    ("t"  . pdf-view-goto-label)
                    ("u"  . pdf-view-revert-buffer)
                    ("al" . pdf-annot-list-annotations)
                    ("ad" . pdf-annot-delete)
                    ("aa" . pdf-annot-attachment-dired)
                    ("am" . pdf-annot-add-markup-annotation)
                    ("at" . pdf-annot-add-text-annotation)
                    ("y"  . pdf-view-kill-ring-save)
                    ("i"  . pdf-misc-display-metadata)
                    ("s"  . pdf-occur)
                    ("b"  . pdf-view-set-slice-from-bounding-box)
                    ("r"  . pdf-view-reset-slice))
             :init
             (pdf-tools-install t t)
             :config
             (setq ;; pdf-misc-print-programm "/usr/bin/gtklp"
              pdf-misc-print-programm-args '("-o media=A4" "-o fitplot")
              pdf-view-display-size 'fit-page
              ;; pdf-view-use-imagemagick t
              pdf-view-midnight-colors '("white smoke" . "gray5")))
     #+END_SRC

*** WRITING
**** BIBTEX
**** GKROAM
     #+BEGIN_SRC emacs-lisp
       (leaf gkroam
             :straight (gkroam
                        :type git
                        :host github
                        :repo "Kinneyzhang/gkroam"
                        :branch "develop")
             :hook (after-init . gkroam-mode)
             :init
             (setq gkroam-root-dir "~/Dropbox/org/gkroam/"
                   gkroam-prettify-page-p t
                   gkroam-show-brackets-p t
                   gkroam-use-default-filename t
                   gkroam-window-margin 0)
             :bind
             (gkroam-mode-map
              (("C-c r I" . gkroam-index)
               ("C-c r d" . gkroam-daily)
               ("C-c r D" . gkroam-delete)
               ("C-c r f" . gkroam-find)
               ("C-c r i" . gkroam-insert)
               ("C-c r n" . gkroam-dwim)
               ("C-c r e" . gkroam-link-edit)
               ("C-c r u" . gkroam-show-unlinked)
               ("C-c r p" . gkroam-toggle-prettify)
               ("C-c r t" . gkroam-toggle-brackets)
               ("C-c r R" . gkroam-rebuild-caches)
               ("C-c r g" . gkroam-update))))
     #+END_SRC

**** ORGREF
**** PRESENTATION
**** LATEX
* UTILITIES
** MY:UTILS
   #+BEGIN_SRC emacs-lisp
     (leaf dash :straight t)
     (require 'subr-x)

     (defvar-local +project-name-cache nil
       "Cache for current project name.")

     (defun +in-string-p ()
       "Returns non-nil if inside string, else nil.
     Result depends on syntax table's string quote character."
       (interactive)
       (or (nth 3 (syntax-ppss))
           (member 'font-lock-string-face
                   (text-properties-at (point)))))

     (defun +in-comment-p ()
       "Returns non-nil if inside comment, else nil.
     Result depends on syntax table's comment character."
       (interactive)
       (nth 4 (syntax-ppss)))

     (defun +smart-file-name ()
       "Get current file name, if we are in project, the return relative path to the project root, otherwise return absolute file path.
     This function is slow, so we have to use cache."
       (let ((vc-dir (vc-root-dir))
             (bfn (buffer-file-name (current-buffer))))
         (cond
          ((and bfn vc-dir)
           (file-relative-name bfn vc-dir))
          (bfn bfn)
          (t (buffer-name)))))

     (defmacro +measure-time (&rest body)
       "Measure the time it takes to evaluate BODY."
       `(let ((time (current-time)))
          ,@body
          (message "%.06fs" (float-time (time-since time)))))

     (defface +modeline-dim-face
       '((((class color) (background dark))
          (:foreground "grey40"))
         (((class color) (background light))
          (:foreground "grey60")))
       "Dim face in mode-line")

     (defvar-local +smart-file-name-with-propertize-cache nil
       "Cache for performance, is a cons of (buffer-name . cached-value).")

     (defun +smart-file-name-cached ()
       (-when-let ((buf-name p f) +smart-file-name-with-propertize-cache)
         (when (string-equal buf-name (buffer-file-name))
           (let ((face (cond
                        ((buffer-modified-p) 'font-lock-string-face)
                        (buffer-read-only 'font-lock-comment-face)
                        (t nil))))
             (concat (propertize p 'face '+modeline-dim-face) (propertize f 'face face))))))

     (defun +smart-file-name-cached-no-propertize ()
       (-when-let ((buf-name p f) +smart-file-name-with-propertize-cache)
         (when (string-equal buf-name (buffer-file-name))
           (string-truncate-left (concat p f) 30))))

     (defun +smart-file-name-with-propertize ()
       (if-let ((cached (+smart-file-name-cached)))
           cached
         (let* ((fname (+smart-file-name))
                (slist (split-string fname "/"))
                (p (concat (string-join (-butlast slist) "/") "/"))
                (f (-last-item slist)))
           (setq-local +smart-file-name-with-propertize-cache (list (buffer-file-name) p f))
           (+smart-file-name-cached))))

     (defun +smart-file-name-truncated ()
       (if-let ((cached (+smart-file-name-cached-no-propertize)))
           cached
         (let* ((fname (+smart-file-name))
                (slist (split-string fname "/"))
                (p (concat (string-join (-butlast slist) "/") "/"))
                (f (-last-item slist)))
           (setq-local +smart-file-name-with-propertize-cache (list (buffer-file-name) p f))
           (+smart-file-name-cached-no-propertize))))

     (defun +file-vc-state-with-propertize ()
       (when-let ((sym (vc-state (buffer-file-name (current-buffer)))))
         (format "%s" sym)))

     (defun +vc-branch ()
       (car (vc-git-branches)))

     (defun +project-name ()
       "Get project name, which is used in title format."
       (cond
        (+project-name-cache +project-name-cache)
        ((project-current)
         (setq-local +project-name-cache
                     (-> (project-root (project-current))
                         (string-trim-right "/")
                         (file-name-base))))
        (t (setq-local +project-name-cache ""))))

     (defun +make-silent (func &rest args)
       (cl-letf (((symbol-function 'message)
                  (lambda (&rest args) nil)))
         (apply func args)))

     ;;; Case transform

     (defun +to-pascal-case (s)
       (let* ((words (split-string s "-\\|_"))
              (capwords (mapcar #'capitalize words)))
         (string-join capwords "")))

     (defun +color-blend (c1 c2 alpha)
       "Blend two colors C1 and C2 with ALPHA.
     C1 and C2 are hexidecimal strings.
     ALPHA is a number between 0.0 and 1.0 which corresponds to the
     influence of C1 on the result."
       (ignore-errors
         (apply #'(lambda (r g b)
                    format "#%02x%02x%02x"
                    (ash r -8)
                    (ash g -8)
                    (ash b -8))
                (cl-mapcar
                 (lambda (x y)
                   (round (+ (* x alpha) (* y (- 1 alpha)))))
                 (color-values c1) (color-values c2)))))

     (defun +my-throw-error (&rest args)
       (when (equal (car args) "Text is read-only")
         a))

     (advice-add 'message :after #'+my-throw-error)
     (advice-remove 'message #'+my-throw-error)
   #+END_SRC

* FOOTER
  #+BEGIN_SRC emacs-lisp
  ;;; init-emacs.el ends here.
  ;;; (provide 'init-emacs)
  #+END_SRC
