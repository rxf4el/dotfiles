#+TITLE: EMACS CONFIGURATION
#+AUTHOR: rxf4el
#+EMAIL: rxf4el@gmail.com
* Header
  #+NAME:
  #+BEGIN_SRC emacs-lisp

  #+END_SRC

* Straight.el
  #+NAME:
  #+BEGIN_SRC emacs-lisp
    (setq straight-vc-git-default-clone-depth 1)
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
    (require 'straight-x)
  #+END_SRC

* Customs
** Personal Information
   #+NAME:
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name    "Rafael M. Marte")
     (setq user-mail-address "rxf4el@gmail.com")
     (setq user-login-name   "rxf4el")
   #+END_SRC

** Defaults
   #+NAME:
   #+BEGIN_SRC emacs-lisp
     (setq-default
      inhibit-startup-message t
      inhibit-x-resources t
      inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t
      initial-major-mode 'emacs-lisp-mode
      frame-inhibit-implied-resize t
      initial-scratch-message ""
      hl-line-sticky-flag nil
      ;; Prefer horizental split
      split-height-threshold nil
      split-width-threshold 120
      ;; Don't create lockfiles
      create-lockfiles nil
      ;; UTF-8
      buffer-file-coding-system 'utf-8-unix
      default-file-name-coding-system 'utf-8-unix
      default-keyboard-coding-system 'utf-8-unix
      default-process-coding-system '(utf-8-unix . utf-8-unix)
      default-sendmail-coding-system 'utf-8-unix
      default-terminal-coding-system 'utf-8-unix
      ;; Add final newline
      require-final-newline t
      ;; Backup setups
      backup-directory-alist `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
      backup-by-copying t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t
      ;; Custom file
      custom-file (concat my:cache "/custom.el")
      ;; Xref no prompt
      xref-prompt-for-identifier nil
      ;; Mouse yank at point instead of click position.
      mouse-yank-at-point t
      ;; This fix the cursor movement lag
      auto-window-vscroll nil
      ;; Window divider setup
      window-divider-default-right-width 1
      window-divider-default-bottom-width 1
      window-divider-default-places t
      ;; Don't wait for keystrokes display
      echo-keystrokes 0.01
      show-paren-style 'parenthese
      ;; Overline no margin
      overline-margin 0
      underline-minimum-offset 0
      tab-width 4
      ;; Don't show cursor in non selected window.
      cursor-in-non-selected-windows nil
      comment-empty-lines nil                ;t
      visible-cursor t
      ;; Improve long line display performance
      bidi-inhibit-bpa t
      bidi-paragraph-direction 'left-to-right
      ;; Allow resize by pixels
      frame-resize-pixelwise t
      x-gtk-resize-child-frames nil
      x-underline-at-descent-line t
      indent-tabs-mode nil
      read-process-output-max (* 1024 1024)
      ;; Don't truncate lines in a window narrower than 65 chars.
      truncate-partial-width-windows 65
      ;; Default line number width.
      display-line-numbers-width 1           ; 4
      ;; Window divider on right
      window-divider-default-places t
      ;; Don't display comp warnings
      warning-suppress-log-types '((comp)))

     (fset 'yes-or-no-p 'y-or-n-p)

     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
     (add-hook 'conf-mode-hook 'display-line-numbers-mode)
     (add-hook 'prog-mode-hook 'hl-line-mode)
     (add-hook 'conf-mode-hook 'hl-line-mode)
     (add-hook 'prog-mode-hook 'subword-mode)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;;; unset annoying freezes whe C-z is pressed
     (global-unset-key (kbd "C-z"))
     (global-unset-key (kbd "C-x C-z"))

     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     ;; (fringe-mode -1)
     (add-hook 'after-init-hook (lambda () (blink-cursor-mode -1)))

     ;;; project.el use C-x p
     (global-unset-key (kbd "C-x C-p"))
     (global-set-key (kbd "C-x C-d") #'dired)

     (defun +reopen-file-with-sudo ()
       (interactive)
       (find-alternate-file (format "/sudo::%s" (buffer-file-name))))

     (global-set-key (kbd "C-x C-z") #'+reopen-file-with-sudo)
     ;; (global-set-key (kbd "<f7>") #'profiler-start)
     ;; (global-set-key (kbd "<f8>") #'profiler-report)

     ;;; Run GC when idle for 7 seconds or when Emacs is unfocused.
     (run-with-idle-timer 7 t #'garbage-collect)
     (add-hook 'focus-out-hook #'garbage-collect)
   #+END_SRC

** Aesthetics
*** Font
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (defvar +font-family "Fira Code")
      (defvar +ufont-family "Iosevka")
      (defvar +font-size 11)
      (defvar +ufont-scale 0.95)

      (defun +load-font ()
        (let* ((font-spec (format "%s-%d" +font-family +font-size)))
          (if (not (member +font-family (font-family-list)))
              (message "Font '%s' not available!" font-family)
            (set-face-attribute 'default nil :font font-spec)
            (set-frame-font font-spec t nil)))

        (if (not (member +ufont-family (font-family-list)))
            (message "Font '%s' not available!" +ufont-family)
          (setq-default face-font-rescale-alist `((,+ufont-family . ,+ufont-scale)))
          (dolist (charset '(kana han symbol cjk-misc bopomofo))
            (set-fontset-font (frame-parameter nil 'font)
                              charset
                              (font-spec :family +ufont-family)))))

      (+load-font)

      (use-package ligature
                   :straight
                   (ligature :type git
                             :host github
                             :repo "mickeynp/ligature.el")
                   :config
                   (ligature-set-ligatures 'emacs-lisp-mode
                                           '("->" "->>" "<=" ">="))
                   (ligature-set-ligatures 'elixir-mode
                                           '("->" "=>" "|>" "<-" ">=" "<=" "!=" "!==" "===" "==" "::" "++" "&&" "||" "<<" ">>"))
                   (ligature-set-ligatures 'clojure-mode
                                           '("->" "->>" ">=" "<="  ".-"))
                   (ligature-set-ligatures 'web-mode
                                           '("</" "<!--" "-->" "/>"))
                   (global-ligature-mode t))

    #+END_SRC

*** ModeLine
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (use-package smart-mode-line
                   :straight t
                   :config
                   (setq line-number-mode t
                         column-number-mode t
                         sml/mode-width 10
                         sml/no-confirm-load-theme t
                         sml/theme 'respectful)
                   :hook (emacs-startup . sml/setup))

      (use-package mini-modeline
        :straight t
        :custom-face (mini-modeline-mode-line ((t (:background "dim gray" :box nil :height 0.1))))
                     (mini-modeline-mode-line-inactive ((t (:background "#333333" :box nil :height 0.1))))
        :config
        (setq mini-modeline-truncate-p t
              mini-modeline- nil
              mini-modeline-r-format '("%e"
                                       mode-line-front-space
                                       mode-line-mule-info
                                       mode-line-client
                                       mode-line-modified
                                       mode-line-remote
                                       mode-line-frame-identification
                                       mode-line-buffer-identification
                                       (vc-mode vc-mode)
                                       ;;(meow-indicator)
                                       " "
                                       mode-line-position
                                       " "
                                       mode-line-modes
                                       mode-line-misc-info
                                       mode-line-end-spaces))
        :hook (emacs-startup . mini-modeline-mode))

      (use-package rich-minority
                   :straight t
                   :config (setq rm-blacklist nil
                                 rm-whitelist "FlyC\\|Flymake\\|lsp")
                   :hook (emacs-startup . rich-minority-mode))

    #+END_SRC

*** Theme
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path (expand-file-name "themes" user-emacs-directory))

      (defvar +after-change-theme-hook nil
        "Hooks called after theme is changed.")

      (require 'joker-theme)
      (require 'storybook-theme)
      (require 'printed-theme)

      (let ((margin 0))                       ; was 24
        (add-to-list 'default-frame-alist (cons 'internal-border-width margin))
        (set-frame-parameter nil 'internal-border-width margin))

      (defvar +current-theme nil
        "Name for current theme")

      (defvar +theme-list
        '(storybook joker printed))

      (set-display-table-slot standard-display-table
                              'vertical-border
                              (make-glyph-code ?┃))

      (defun +change-theme (&optional no-msg)
        (interactive)
        (let ((theme (car +theme-list)))
          (disable-theme theme)
          (setq +theme-list (append (cdr +theme-list) (list theme)))
          (let ((this-theme (car +theme-list)))
            (load-theme this-theme t)
            (unless no-msg
              (message "Load theme: %s" this-theme))
            (run-hook-with-args '+after-change-theme-hook this-theme))))

      (defun +highlight-prog-mode-function-name ()
        (face-remap-add-relative 'font-lock-function-name-face :underline t :extend t))

      (add-hook 'prog-mode-hook '+highlight-prog-mode-function-name)

      (defun +reload-font-and-theme ()
        (interactive)
        (+load-font)
        (load-theme (car +theme-list) t))

      (+change-theme t)

    #+END_SRC

* Packages
** Built-ins
*** Auto-revert
    #+NAME:
    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** iBuffer
    #+NAME:
    #+BEGIN_SRC emacs-lisp

      ;;; Uniquify
      (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
      (setq uniquify-separator "/")
      (setq uniquify-after-kill-buffer-p t) ; rename after killing uniquified
      (setq uniquify-ignore-buffers-re "*[^*]+*") ; don't muck with special buffers
    #+END_SRC

*** Dabbrev
    #+NAME:
    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** Dired
    #+NAME:
    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** FlyMake
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (use-package flymake
                   :commands (flymake-mode)
                   :bind
                   (:map flymake-mode-map
                         ("M-n" . 'flymake-goto-next-error)
                         ("M-p" . 'flymake-goto-prev-error)))
    #+END_SRC

*** Hippie-Expand
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'hippie-expand
        (setq hippie-expand-verbose t
              hippie-expand-try-functions-list
              '(yas/hippie-try-expand
                try-complete-file-name
                try-complete-file-name-partially
                try-expand-list
                try-expand-list-all-buffers
                try-expand-line
                try-expand-line-all-buffers
                try-expand-all-abbrevs
                try-expand-dabbrev
                try-expand-dabbrev-all-buffers
                try-expand-dabbrev-from-kill
                try-complete-lisp-symbol-partially
                try-complete-lisp-symbol)))
      (global-set-key (kbd "s-'") 'hippie-expand)
    #+END_SRC

*** iSearch
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'isearch
        (setq  search-highlight t
               isearch-lax-whitespace t
               isearch-regexp-lax-whitespace nil
               serach-whitespace-regexp ".*?"
               isearch-lazy-highlight t
               isearch-lazy-count t
               lazy-count-prefix-format nil
               lazy-count-suffix-format " (%s/%s)"
               isearch-yank-on-move 'shift
               isearch-allow-scroll 'unlimited))
    #+END_SRC

** 3rd-Part
*** AggressiveIndent
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
                   :straight t
                   :config
                   (global-aggressive-indent-mode 1))
    #+END_SRC

*** Avy
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (use-package avy
                   :straight t
                   :bind
                   ("C-:" . avy-goto-char)
                   ("C-*" . avy-resume)
                   ("M-g M-g" . avy-goto-line))
    #+END_SRC

*** Code-Complete
**** Company
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package company
                    :init (global-company-mode +1)
                    :commands (company-complete-common company-manual-begin company-grab-line)
                    :config
                    (setq company-idle-delay 0
                          company-show-numbers t
                          company-minimum-prefix-length 2
                          company-tooltip-limit 5
                          company-dabbrev-downcase nil
                          company-dabbrev-ignore-case nil
                          company-dabbrev-code-other-buffers t
                          company-tooltip-align-annotations t
                          company-require-match 'never
                          company-global-modes '(not erc-mode message-mode help-mode gud-mode eshell-mode)
                          company-backends '((company-capf
                                              company-keywords
                                              company-yasnippet)
                                             (company-abbrev company-dabbrev))
                          company-frontends '(company-pseudo-tooltip-frontend
                                              company-echo-metadata-frontend)))
     #+END_SRC

**** Eglot
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package eglot
                    :commands (eglot-ensure eglot)
                    :hook
                    ((rust-mode c-mode elixir-mode python-mode) . eglot-ensure)
                    :custom
                    (eglot-stay-out-of '())
                    (eglot-ignored-server-capabilites '(:documentHighlightProvider)))
     #+END_SRC

**** Yasnippet
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (defun +yas-expand-or-company-complete ()
         (interactive)
         (or (yas/expand)
             (call-interactively #'company-indent-or-complete-common)))

       (use-package yasnippet
                    :config
                    (let ((inhibit-message t)) (yas-reload-all))
                    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
                    :init
                    (yas-global-mode +1))
     #+END_SRC

*** Git
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (use-package magit
                   :commands (magit))

      (use-package diff-hl
                   :hook
                   ((dired-mode . diff-hl-dired-mode)
                    (prog-mode . diff-hl-mode)
                    (conf-mode . diff-hl-mode)))

      (use-package dired-git-info
                   :bind
                   (:map dired-mode-map
                         ("v" . dired-git-info-mode))
                   :custom
                   (dgi-auto-hide-details-p nil))
    #+END_SRC

*** Meow
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (defun meow-setup ()
        (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
        (meow-motion-overwrite-define-key
         '("j" . meow-next)
         '("k" . meow-prev))
        (meow-leader-define-key
         ;; SPC j/k will run the original command in MOTION state.
         '("j" . meow-motion-origin-command)
         '("k" . meow-motion-origin-command)
         ;; Use SPC (0-9) for digit arguments.
         '("1" . meow-digit-argument)
         '("2" . meow-digit-argument)
         '("3" . meow-digit-argument)
         '("4" . meow-digit-argument)
         '("5" . meow-digit-argument)
         '("6" . meow-digit-argument)
         '("7" . meow-digit-argument)
         '("8" . meow-digit-argument)
         '("9" . meow-digit-argument)
         '("0" . meow-digit-argument))
        (meow-normal-define-key
         '("0" . meow-expand-0)
         '("9" . meow-expand-9)
         '("8" . meow-expand-8)
         '("7" . meow-expand-7)
         '("6" . meow-expand-6)
         '("5" . meow-expand-5)
         '("4" . meow-expand-4)
         '("3" . meow-expand-3)
         '("2" . meow-expand-2)
         '("1" . meow-expand-1)
         '("-" . negative-argument)
         '(";" . meow-reverse)
         '("," . meow-inner-of-thing)
         '("." . meow-bounds-of-thing)
         '("[" . meow-beginning-of-thing)
         '("]" . meow-end-of-thing)
         '("a" . meow-append)
         '("A" . meow-open-below)
         '("b" . meow-back-word)
         '("B" . meow-back-symbol)
         '("c" . meow-change)
         '("C" . meow-change-save)
         '("d" . meow-delete)
         '("x" . meow-line)
         '("f" . meow-find)
         '("F" . meow-find-expand)
         '("g" . meow-keyboard-quit)
         '("G" . goto-line)
         '("h" . meow-head)
         '("H" . meow-head-expand)
         '("i" . meow-insert)
         '("I" . meow-open-above)
         '("m" . meow-join)
         '("M" . delete-indentation)
         '("s" . meow-kill)
         '("t" . meow-till)
         '("T" . meow-till-expand)
         '("w" . meow-mark-word)
         '("W" . meow-mark-symbol)
         '("j" . meow-next)
         '("J" . meow-next-expand)
         '("o" . meow-block)
         '("O" . meow-block-expand)
         '("k" . meow-prev)
         '("K" . meow-prev-expand)
         '("q" . meow-quit)
         '("r" . meow-replace)
         '("R" . meow-replace-save)
         '("n" . meow-search)
         '("N" . meow-pop-search)
         '("l" . meow-tail)
         '("L" . meow-tail-expand)
         '("u" . undo)
         '("v" . meow-visit)
         '("e" . meow-next-word)
         '("E" . meow-next-symbol)
         '("y" . meow-save)
         '("p" . meow-yank)
         '("z" . meow-pop-selection)
         '("Z" . meow-pop-all-selection)
         '("?" . meow-cheatsheet)
         '("&" . meow-query-replace)
         '("%" . meow-query-replace-regexp)
         '("<escape>" . meow-last-buffer)))

      (use-package meow
                   :straight
                   (meow :type git
                         :host github
                         :repo "DogLooksGood/meow")
                   :init
                   (meow-global-mode 1)
                   :custom
                   (meow-esc-delay 0.001)
                   (meow-select-on-exit t)
                   (meow-replace-state-name-list
                    '((normal . "Ꮚ•ꈊ•Ꮚ")
                      (insert . "Ꮚ`ꈊ´Ꮚ")
                      (keypad . "Ꮚ'ꈊ'Ꮚ")
                      (motion . "Ꮚ-ꈊ-Ꮚ")))
                   :config
                   (meow-setup-line-number)
                   (add-to-list 'meow-normal-state-mode-list 'inf-iex-mode)
                   (add-to-list 'meow-normal-state-mode-list 'py-shell-mode)
                   (meow-setup))
    #+END_SRC

*** ParEdit
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (defun +lisp-semicolon ()
        "Will insert a semicolon if we are at the beginning of the line,
      otherwise will insert a colon."
        (interactive)
        (if (or (+in-comment-p)
                (+in-string-p)
                (equal (point) (line-beginning-position)))
            (call-interactively #'self-insert-command)
          (insert ":")))

      (use-package paredit
                   :straight
                   (paredit :type git
                            :host github
                            :repo "emacsmirror/paredit")
                   :bind
                   (:map paredit-mode-map
                         (";" . '+lisp-semicolon))
                   :hook
                   (emacs-lisp-mode . paredit-mode))
    #+END_SRC

*** Projectile
    #+NAME:
    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** Scrolling
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (setq-default hscroll-margin 2
                    hscroll-step 1
                    scroll-conservatively 1001
                    scroll-margin 0
                    scroll-preserve-screen-position t)

      (use-package sublimity-scroll
                   :straight sublimity
                   :init (sublimity-mode 1))

      (use-package yascroll
                   :straight t
                   :init (global-yascroll-bar-mode 1))
    #+END_SRC

*** Selectrum
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (use-package embark
                   :ensure t
                   :bind
                   ("s-a" . embark-act)
                   :config
                   ;; For Selectrum users:
                   (defun current-candidate+category ()
                     (when selectrum-active-p
                       (cons (selectrum--get-meta 'category)
                             (selectrum-get-current-candidate))))
                   (add-hook 'embark-target-finders #'current-candidate+category)
                   (defun current-candidates+category ()
                     (when selectrum-active-p
                       (cons (selectrum--get-meta 'category)
                             (selectrum-get-current-candidates
                              ;; Pass relative file names for dired.
                              minibuffer-completing-file-name))))
                   (add-hook 'embark-candidate-collectors #'current-candidates+category)
                   ;; No unnecessary computation delay after injection.
                   (add-hook 'embark-setup-hook 'selectrum-set-selected-candidate)
                   (setq embark-action-indicator
                         (lambda (map)
                           (which-key--show-keymap "Embark" map nil nil 'no-paging)
                           #'which-key--hide-popup-ignore-command)
                         embark-become-indicator embark-action-indicator))

      ;; Consult users will also want the embark-consult package.
      (use-package embark-consult
                   :ensure t
                   :after (embark consult)
                   ;; if you want to have consult previews as you move around an
                   ;; auto-updating embark collect buffer
                   :hook
                   (embark-collect-mode . embark-consult-preview-minor-mode))

      (use-package consult
                   ;; :straight (consult :type git :host github :repo "minad/consult" :branch "main")
                   :init
                   (fset 'multi-occur #'consult-multi-occur)
                   (setq register-preview-delay 0
                         register-preview-function #'consult-register-preview)
                   :bind
                   ("C-x b" . consult-buffer)
                   ("M-y" . consult-yank-pop)
                   ("C-," . consult-line)
                   :custom
                   (consult-line-point-placement 'match-end))

      (use-package selectrum-prescient
                   :init (selectrum-mode)
                   :config
                   (selectrum-prescient-mode 1)
                   (prescient-persist-mode 1)
                   (setq prescient-history-length 100
                         prescient-sort-length-enable nil
                         prescient-filter-method '(literal regexp initialism)))

      (use-package marginalia
                   :straight (marginalia :type git :host github :repo "minad/marginalia" :branch "main")
                   :config
                   (marginalia-mode)
                   (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light)))

      (use-package company-prescient
                   :init
                   (company-prescient-mode 1))

      (use-package helm
                   :custom (helm-bibtex-full-frame nil)
                   :config
                   (setq helm-autoresize-max-height 0)
                   (setq helm-autoresize-min-height 30)
                   (helm-autoresize-mode 1))

    #+END_SRC

*** Treemacs
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (defun +treemacs-scale-font-size ()
        (face-remap-add-relative 'default :height 0.8))

      (use-package treemacs
                   :commands
                   (treemacs treemacs-select-window)
                   :bind
                   ("<f1>" . 'treemacs-select-window)
                   (:map treemacs-mode-map
                         ("<f1>" . 'treemacs))
                   :custom
                   (treemacs-no-png-images t)
                   (treemacs-width 40)
                   :init
                   (add-hook 'treemacs-mode-hook '+treemacs-scale-font-size))
    #+END_SRC

*** Which-Keys
    #+NAME:
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
                   :init (which-key-mode 1))

    #+END_SRC

** Programming
*** Languages
**** Clojure
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package clojure-mode
                    :hook
                    (clojure-mode . paredit-mode)
                    :bind
                    (:map
                     clojure-mode-map
                     ("/" . 'cljr-slash)
                     ("C-c C-i" . 'cider-inspect-last-result))
                    :config
                    (modify-syntax-entry ?: "w" clojure-mode-syntax-table)
                    (require 'init-clojure-highlight-fix)
                    :custom
                    (clojure-toplevel-inside-comment-form t))

       (use-package clj-refactor
                    :hook (clojure-mode . clj-refactor-mode)
                    :config
                    (unbind-key "/" clj-refactor-map)
                    (cljr-add-keybindings-with-prefix "C-c C-r")
                    :custom
                    (cljr-warn-on-eval t)
                    (cljr-suppress-middleware-warnings t))

       (use-package cider
                    :commands (cider-jack-in cider-jack-in-cljs cider-jack-in-clj&cljs)
                    :bind
                    (:map
                     cider-mode-map
                     ("C-!" . 'cider-read-and-eval)
                     ("M-." . 'cider-find-var)
                     :map
                     cider-repl-mode-map
                     ("M-," . 'cider-repl-handle-shortcut)
                     ("C-," . 'cider-repl-handle-shortcut))
                    :init
                    (setq-default cider-default-cljs-repl 'shadow)
                    :custom
                    (cider-font-lock-dynamically nil)
                    (cider-font-lock-reader-conditionals nil)
                    (cider-use-fringe-indicators t)
                    (cider-prompt-for-symbol nil)
                    (cider-save-file-on-load t)
                    (cider-enhanced-cljs-completion-p nil)
                    (cider-offer-to-open-cljs-app-in-browser nil)
                    :config
                    (unbind-key "M-." cider-mode-map)
                    (unbind-key "C-c C-p" cider-mode-map)
                    (setq cider-allow-jack-in-without-project t
                          cider-repl-buffer-size-limit 100000
                          cider-repl-tab-command #'indent-for-tab-command
                          cider-repl-pop-to-buffer-on-connect 'display-only
                          cider-repl-result-prefix ";; => "
                          cider-repl-require-ns-on-set t
                          cider-repl-use-pretty-printing t
                          cider--print-buffer-size (* 8 1024)
                          cider-print-quota (* 1024 1024)))
     #+END_SRC

**** Common-Lisp
     #+NAME:
     #+BEGIN_SRC emacs-lisp

     #+END_SRC

**** Perl
     #+NAME:
     #+BEGIN_SRC emacs-lisp

     #+END_SRC

**** Python
     #+NAME:
     #+BEGIN_SRC emacs-lisp

     #+END_SRC

**** R
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package ess-R-data-view
         :straight t)
     #+END_SRC

*** Modes
**** CSV
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package csv-mode
         :mode ("\\.[cC][sS][vV]\\'" . csv-mode))
     #+END_SRC

**** MarkDown
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package markdown-mode
         :custom
         (markdown-fontify-code-blocks-natively t)
         :init
         (add-hook 'markdown-mode-hook 'markdown-toggle-markup-hiding))
     #+END_SRC

**** Nix
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package nix-mode
         :mode ("\\.nix\\'" . nix-mode))
     #+END_SRC

**** Web
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package web-mode
         :custom
         (web-mode-markup-indent-offset 2)
         (web-mode-code-indent-offset 2)
         (web-mode-css-indent-offset 2))

       (setq-default
        js-indent-level 2
        css-indent-offset 2)

       (use-package emmet-mode
         :hook
         (web-mode . emmet-mode)
         (html-mode . emmet-mode)
         :bind
         ((:map emmet-mode-keymap
                ("M-e" . 'emmet-expand-line))))
     #+END_SRC

** Bioinformatics
*** Graphics
**** GraphViz
     #+NAME:
     #+BEGIN_SRC emacs-lisp

     #+END_SRC

**** GnuPlot
     #+NAME:
     #+BEGIN_SRC emacs-lisp

     #+END_SRC

*** Readers
**** ePUB
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package nov
                    :config (progn
                              (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
                              (add-hook 'nov-mode-hook
                                        (lambda ()
                                          (face-remap-add-relative 'variable-pitch
                                                                   :family "Liberation Serif"
                                                                   :height 1.2)))
                              ;; (add-hook 'nov-mode-hook (lambda () (olivetti-mode 1)))
                              (setq nov-text-width 72)))

     #+END_SRC

**** PDF
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package pdf-tools
                    :straight t
                    :bind (:map pdf-view-mode-map
                                ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
                                ("g"  . pdf-view-first-page)
                                ("G"  . pdf-view-last-page)
                                ("l"  . image-forward-hscroll)
                                ("h"  . image-backward-hscroll)
                                ("j"  . pdf-view-next-line-or-next-page)
                                ("k"  . pdf-view-previous-line-or-previous-page)
                                ("e"  . pdf-view-goto-page)
                                ("t"  . pdf-view-goto-label)
                                ("u"  . pdf-view-revert-buffer)
                                ("al" . pdf-annot-list-annotations)
                                ("ad" . pdf-annot-delete)
                                ("aa" . pdf-annot-attachment-dired)
                                ("am" . pdf-annot-add-markup-annotation)
                                ("at" . pdf-annot-add-text-annotation)
                                ("y"  . pdf-view-kill-ring-save)
                                ("i"  . pdf-misc-display-metadata)
                                ("s"  . pdf-occur)
                                ("b"  . pdf-view-set-slice-from-bounding-box)
                                ("r"  . pdf-view-reset-slice))
                    :init
                    (pdf-tools-install t t)
                    :config
                    (setq ;; pdf-misc-print-programm "/usr/bin/gtklp"
                     pdf-misc-print-programm-args (quote ("-o media=A4" "-o fitplot"))
                     pdf-view-display-size 'fit-page
                     ;; pdf-view-use-imagemagick t
                     pdf-view-midnight-colors '("white smoke" . "gray5")))

     #+END_SRC

*** Writers
**** GkRoam
     #+NAME:
     #+BEGIN_SRC emacs-lisp
       (use-package gkroam
                    :straight (gkroam
                               :type git
                               :host github
                               :repo "Kinneyzhang/gkroam"
                               :branch "develop")
                    :hook (after-init . gkroam-mode)
                    :init
                    (setq gkroam-root-dir "~/Dropbox/org/gkroam/"
                          gkroam-prettify-page-p t
                          gkroam-show-brackets-p t
                          gkroam-use-default-filename t
                          gkroam-window-margin 0)
                    :bind
                    (:map gkroam-mode-map
                          (("C-c r I" . gkroam-index)
                           ("C-c r d" . gkroam-daily)
                           ("C-c r D" . gkroam-delete)
                           ("C-c r f" . gkroam-find)
                           ("C-c r i" . gkroam-insert)
                           ("C-c r n" . gkroam-dwim)
                           ("C-c r e" . gkroam-link-edit)
                           ("C-c r u" . gkroam-show-unlinked)
                           ("C-c r p" . gkroam-toggle-prettify)
                           ("C-c r t" . gkroam-toggle-brackets)
                           ("C-c r R" . gkroam-rebuild-caches)
                           ("C-c r g" . gkroam-update))))

     #+END_SRC

**** Latex
     #+NAME:
     #+BEGIN_SRC emacs-lisp

     #+END_SRC

**** Org-Mode
***** Org
      #+NAME:
      #+BEGIN_SRC emacs-lisp
        (defvar-local +org-last-in-latex nil)

        (defun +org-post-command-hook ()
          (ignore-errors
            (let ((in-latex (rime-predicate-org-latex-mode-p)))
              (if (and +org-last-in-latex (not in-latex))
                  (progn (org-latex-preview)
                         (setq +org-last-in-latex nil)))

              (when-let ((ovs (overlays-at (point))))
                (when (->> ovs
                           (--map (overlay-get it 'org-overlay-type))
                           (--filter (equal it 'org-latex-overlay)))
                  (org-latex-preview)
                  (setq +org-last-in-latex t)))

              (when in-latex
                (setq +org-last-in-latex t)))))

        (define-minor-mode org-latex-auto-toggle
          "Auto toggle latex overlay when cursor enter/leave."
          nil
          nil
          nil
          (if org-latex-auto-toggle
              (add-hook 'post-command-hook '+org-post-command-hook nil t)
            (remove-hook 'post-command-hook '+org-post-command-hook t)))

        ;;; Org babel

        (defun +org-redisplay-inline-images ()
          (when org-inline-image-overlays
            (org-redisplay-inline-images)))

        (defun +org-babel-setup ()
          (org-babel-do-load-languages
           'org-babel-load-languages
           '((python . t)
             (emacs-lisp . t)
             (clojure . t)))
          (setq org-babel-clojure-backend 'cider)
          (setq org-confirm-babel-evaluate nil)
          (add-hook 'org-babel-after-execute-hook '+org-redisplay-inline-images))

        (use-package org
                     :straight (:type built-in)
                     :bind
                     (:map org-mode-map
                           ("<f8>" . org-latex-auto-toggle))
                     :config
                     (require 'ob-clojure)
                     (require 'cider)
                     (require 'org-tempo)
                     (+org-babel-setup))

        ;;; Update latex options after change theme.

        (defun +org-update-latex-option-by-theme (theme)
          (when (bound-and-true-p org-format-latex-options)
            (setq org-format-latex-options
                  (plist-put org-format-latex-options :theme theme))))

        (add-hook '+after-change-theme-hook '+org-update-latex-option-by-theme)

        ;;; install latex with
        ;;; pacman -S texlive-bin texlive-most
        ;;; install xdot
        ;;; pacman -S xdot

        (use-package org-superstar
                     :hook (org-mode . org-superstar-mode))

      #+END_SRC

***** Org-Utils
      #+NAME:
      #+BEGIN_SRC emacs-lisp
        (use-package org-ref
                     ;; :custom ((org-ref-ivy-cite-completion t)
                     ;;          (org-ref-completion-library 'org-ref-ivy-cite))
                     :config
                     (require 'org-ref)
                     (require 'org-ref-pdf)
                     (require 'org-ref-bibtex)
                     (require 'org-ref-url-utils)
                     (setq reftex-default-bibliography "~/Dropbox/org/biblio/ref.bib"
                           org-ref-default-bibliography '("~/Dropbox/org/biblio/ref.bib")
                           org-ref-bibliography-notes "~/Dropbox/org/biblio/notes.org"
                           org-ref-pdf-directory "~/Dropbox/org/biblio/papers/"))


        ;; tasks management
        (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
        (setq org-log-done t
              org-clock-idle-time nil
              org-todo-keywords (quote
                                 ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                                  (sequence "WAITING(w)" "HOLD(h)" "|" "CANCELLED(c)" "PHONE" "MEETING"))))

        ;; Org-Agenda
        ;; agenda & diary
        (setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
        (setq org-agenda-include-diary nil
              org-agenda-tags-todo-honor-ignore-options t
              org-agenda-start-on-weekday nil
              org-agenda-start-day "-1d"
              org-agenda-span 7
              show-week-agenda-p t
              org-agenda-timegrid-use-ampm 1
              org-agenda-inhibit-startup t
              org-agenda-files (quote
                                ("~/Dropbox/org/work.org"
                                 "~/Dropbox/org/stuff.org"
                                 "~/Dropbox/org/inbox.org")))

        (use-package org-super-agenda
                     :straight t
                     :defer t
                     :config
                     (setq org-super-agenda-groups '((:name "Today"
                                                            :time-grid t
                                                            :scheduled today)
                                                     (:name "Due today"
                                                            :deadline today)
                                                     (:name "Important"
                                                            :priority "A")
                                                     (:name "Overdue"
                                                            :deadline past)
                                                     (:name "Due soon"
                                                            :deadline future)
                                                     (:name "Big Outcomes"
                                                            :tag "bo")))
                     (org-super-agenda-mode))

        (use-package org-gcal
                     :config
                     :config
                     (setq org-gcal-client-id "70155025522-sod2sd5j69fqbtajhnllgmgprhavspo5.apps.googleusercontent.com"
                           org-gcal-client-secret "x58hbBKXDZ8JfdEdeDYYC8_u"
                           org-gcal-fetch-file-alist '(("rxf4el@gmail.com" .  "~/Dropbox/org/inbox.org"))))

        (use-package calfw
                     :config
                     (setq cfw:display-calendar-holidays nil
                           calendar-week-start-day 1
                           cfw:fchar-junction ?╬
                           cfw:fchar-vertical-line ?║
                           cfw:fchar-horizontal-line ?═
                           cfw:fchar-left-junction ?╠
                           cfw:fchar-right-junction ?╣
                           cfw:fchar-top-junction ?╦
                           cfw:fchar-top-left-corner ?╔
                           cfw:fchar-top-right-corner ?╗))

        (use-package calfw-org
                     :bind ("C-c f" . cfw:open-org-calendar)
                     :config
                     (setq cfw:org-overwrite-default-keybinding t))

        ;; Org-Utils (need to port for the right place)
        ;; date insertion configuration
        (setq org-expiry-created-property-name "CREATED"
              org-expiry-inactive-timestamps t
              org-todo-state-tags-triggers (quote
                                            (("CANCELLED" ("CANCELLED" . t))
                                             ("WAITING" ("WAITING" . t))
                                             ("HOLD" ("WAITING") ("HOLD" . t))
                                             (done ("WAITING") ("HOLD"))
                                             ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                             ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                                             ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

        (setq org-latex-pdf-process
              '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))

      #+END_SRC

***** Org-Babel
      #+NAME:
      #+BEGIN_SRC emacs-lisp

      #+END_SRC

***** Org-Capture
      #+NAME:
      #+BEGIN_SRC emacs-lisp

      #+END_SRC

***** Org-Presentation
      #+NAME:
      #+BEGIN_SRC emacs-lisp

      #+END_SRC

* Footer
  #+NAME:
  #+BEGIN_SRC emacs-lisp
    ;; config.el ends here.
  #+END_SRC
